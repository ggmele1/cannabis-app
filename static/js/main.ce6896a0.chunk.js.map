{"version":3,"sources":["components/imageSources.js","components/StrainMini.js","components/SearchBar.js","components/Nav.js","components/SimilarStrains.js","components/StrainDetails.js","components/Strain.js","components/Landing.js","components/AllStrains.js","config/FIREBASE_API.js","App.js","config/STRAIN_API.js","index.js","components/images/DopestData.png"],"names":["imageSources","StrainMini","props","preSelect","count","Container","size","className","map","item","key","to","onClick","getStrainByName","indexOf","toString","handleLink","src","alt","Divider","Typography","variant","useStyles","makeStyles","theme","marginAutoContainer","marginTop","textAlign","display","flexDirection","alignItems","input","fontFamily","fontWeight","marginBottom","background","color","border","borderRadius","textInput","SearchBar","useState","inputValue","setInputValue","allStrains","classes","Autocomplete","disableClearable","loadingText","freeSolo","id","options","getOptionLabel","option","name","style","width","renderInput","params","TextField","label","onInputChange","event","newInputValue","Nav","setIsSuccess","setStrainName","setNoStrainError","logo","SimilarStrains","similarStrainsList","length","Math","floor","random","race","StrainDetails","description","medical","positive","negative","strainRace","cards","maxWidth","chipWrapper","justifyContent","flexWrap","margin","spacing","Card","CardContent","Chip","Strain","loading","setIsLoading","useEffect","setTimeout","imageName","setIsPng","setIsJpg","setIsDefault","isPng","isJpg","isDefault","isSuccess","returnToSearch","CircularProgress","onError","type","Landing","Box","component","columns","minWidth","table","padding","alignContent","button","wrapper","container","maxHeight","pagination","AllStrains","page","setPage","rowsPerPage","setRowsPerPage","strainTypeLabel","setStrainTypeLabel","strainsTable","setStrainsTable","handleTypeChange","filtered","filter","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","FormControl","formControl","FormHelperText","NativeSelect","selectEmpty","value","onChange","target","inputProps","TableBody","slice","row","hover","role","tabIndex","TablePagination","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","FIREBASE_API","apiKey","authDomain","databaseURL","createMuiTheme","typography","join","App","setStrainRace","strainDesc","setStrainDesc","setMedical","setPositive","setNegative","strainImageName","setStrainImageName","strainName","imageCount","setImageCount","setSimilarStrainsList","setAllStrains","noStrainError","Firebase","apps","initializeApp","getAllStrainsData","database","ref","on","snapshot","getData","val","sort","a","b","strain","axios","get","then","response","data","forEach","matches","toLowerCase","desc","getStrainDetails","getSimilarStrains","getStrainImageName","getEffectsData","console","log","medicalEffects","positiveEffects","negativeEffects","Object","entries","push","replace","similarStrain","similarStrainsArray","i","ThemeProvider","exact","path","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ce6896a0.chunk.js","sourcesContent":["const imageSources = [\n    \"https://images.leafly.com/flower-images/purple-punch-fixed.jpg\",\n    \"https://images.leafly.com/flower-images/wedding-cake.jpg\",\n    \"https://images.leafly.com/flower-images/gg-4.jpg\",\n    \"https://images.leafly.com/flower-images/sour-diesel.jpg\",\n    \"https://images.leafly.com/flower-images/blue-dream.png\",\n    \"https://images.leafly.com/flower-images/flMvWRExSXSewuwawFG6_WHITE%20FIRE-358-edited.jpg\"\n]\nexport default imageSources;","import React from \"react\";\nimport \"../App.css\";\nimport imageSources from \"./imageSources\";\nimport { Typography, Divider, Container } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nconst StrainMini = (props) => {\n  const preSelect = [\n    \"Cali Kush\",\n    \"Gelato\",\n    \"OG Kush\",\n    \"Ice Queen\",\n    \"lime Haze\",\n    \"Blueberry\",\n  ];\n  let count = 0;\n\n  const handleLink = (item) => {\n    props.getStrainByName(\n      preSelect[preSelect.indexOf(item.toString()).toString()]\n    );\n  };\n\n  return (\n    <Container size=\"md\">\n      <div className=\"center-row\">\n        {preSelect.map((item, key) => (\n          <Link to=\"strain\">\n            <button key={key} className=\"link\" onClick={() => handleLink(item)}>\n              <div className=\"other-strains-wrapper\">\n                <div className=\"other-strains\">\n                  <img\n                    src={imageSources[count++]}\n                    alt=\"default\"\n                    className=\"other-strain-image\"\n                  />\n                  <Divider className=\"colored-divider\" />\n                  <div className=\"other-strain-typography\">\n                    <Typography\n                      variant=\"subtitle1\"\n                      className=\"header-mini primary\"\n                    >\n                      {item}\n                    </Typography>\n                    <Typography variant=\"body2\" className=\"header-mini primary\">\n                      Sativa\n                    </Typography>\n                  </div>\n                </div>\n              </div>\n            </button>\n          </Link>\n        ))}\n      </div>\n    </Container>\n  );\n};\n\nexport default StrainMini;\n","import React, { useState } from \"react\";\nimport { TextField, Typography, Container } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport StrainMini from \"./StrainMini.js\";\nimport \"../App.css\";\n\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  marginAutoContainer: {\n    marginTop: 25,\n    textAlign: \"left\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  input: {\n    fontFamily: \"Lato\",\n    fontWeight: \"900\",\n    marginTop: 25,\n    marginBottom: 6,\n    background: \"#31ab65\",\n    color: \"#141414\",\n    border: \"2px solid\",\n    borderRadius: 3,\n  },\n  textInput: {\n    fontFamily: \"Lato\",\n    fontWeight: \"900\",\n  },\n}));\n\nconst SearchBar = (props) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const { getStrainByName, allStrains } = props;\n\n  const handleSubmit = () => {\n    getStrainByName(inputValue);\n    setInputValue(\"\");\n  };\n\n  const classes = useStyles();\n  return (\n    <div className=\"search\">\n      <Container size=\"md\" className={classes.marginAutoContainer}>\n        <Typography variant=\"h3\" className=\"primary header\">\n          Search a cannabis strain.\n        </Typography>\n        <div className=\"input\">\n          <Autocomplete\n            disableClearable\n            className={classes.input}\n            loadingText=\"Loading\"\n            freeSolo\n            id=\"combo-box-demo\"\n            options={allStrains}\n            getOptionLabel={(option) => option.name}\n            style={{ width: 340 }}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Search Strain\"\n                variant=\"filled\"\n                className={classes.textInput}\n              />\n            )}\n            onInputChange={(event, newInputValue) =>\n              setInputValue(newInputValue)\n            }\n          />\n\n          <Link to=\"/strain\">\n            <button\n              className=\"btn-fill btn-bottom\"\n              onClick={() => handleSubmit()}\n            >\n              Search\n            </button>\n          </Link>\n        </div>\n        <Typography variant=\"h6\" className=\"secondary\">\n          Popular Searches\n        </Typography>\n        <div className=\"suggestions\">\n          <StrainMini getStrainByName={getStrainByName} />\n        </div>\n        <Link to=\"/browse\" className=\"center-row\">\n          <button className=\"btn-fill btn-bottom full\">\n            Browse All Strains\n          </button>\n        </Link>\n      </Container>\n    </div>\n  );\n};\nexport default SearchBar;\n","import React from \"react\";\nimport logo from \"./images/DopestData.png\";\nimport \"../App.css\";\nimport {Link} from \"react-router-dom\";\n\nconst Nav = (props) => {\n  const { setIsSuccess, setStrainName, setNoStrainError } = props;\n  const returnToSearch = () => {\n    setIsSuccess(false);\n    setStrainName(\"\");\n    setNoStrainError(false);\n  };\n\n  return (\n    <Link to=\"/search\">\n    <button className=\"link\" onClick={() => returnToSearch()}>\n      <div className=\"nav\">\n        <img src={logo} alt=\"logo\" className=\"logo\" />\n      </div>\n    </button>\n    </Link>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport \"../App.css\";\nimport imageSources from \"./imageSources\";\nimport { Typography, Divider, Container } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nconst SimilarStrains = (props) => {\n  const { similarStrainsList, getStrainByName } = props;\n  \n  const handleLink = (item) => {\n    getStrainByName(item);\n  };\n\n  return (\n    <Container>      \n      <Typography variant=\"h4\" className=\"header primary\">\n        Similar Strains\n      </Typography>\n      {similarStrainsList.length !== 6 ? (\n        <div>Loading</div>\n      ) : (\n        <div className=\"center-row\">\n          {similarStrainsList.map((item, key) => (\n            <Link to=\"/strain\">\n            <button\n              key={key}\n              className=\"link\"\n              onClick={() => handleLink(item.name)}\n            >\n              <div className=\"other-strains-wrapper\">\n                <div className=\"other-strains\">\n                  <img\n                    src={imageSources[Math.floor(Math.random() * 4 + 1)]}\n                    alt=\"default\"\n                    className=\"other-strain-image\"\n                  />\n                  <Divider className=\"colored-divider\" />\n                  <div className=\"other-strain-typography\">\n                    <Typography\n                      variant=\"body2\"\n                      className=\"header-mini primary\"\n                    >\n                      {item.name}\n                    </Typography>\n                    <Typography variant=\"body2\" className=\"header-mini primary\">\n                      {item.race}\n                    </Typography>\n                  </div>\n                </div>\n              </div>\n            </button>\n            </Link>\n          ))}\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default SimilarStrains;\n","import React from \"react\";\nimport \"../App.css\";\nimport {\n  Typography,\n  Chip,\n  Card,\n  CardContent,\n  Divider,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst StrainDetails = (props) => {\n  const { description, medical, positive, negative, name, strainRace } = props;\n\n  const useStyles = makeStyles((theme) => ({\n    cards: {\n      marginTop: 25,\n      background: \"#ebebeb\",\n      borderRadius: 10,\n      maxWidth: 600,\n    },\n    chipWrapper: {\n      display: \"flex\",\n      marginTop: 8,\n      justifyContent: \"center\",\n      flexWrap: \"wrap\",\n      \"& > *\": {\n        margin: theme.spacing(0.5),\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n    <div>\n      <div className=\"strain-header-wrapper\">\n        <Typography variant=\"h3\" className=\"header decorate\">\n          {name}\n        </Typography>\n        <Typography variant=\"h5\" className=\"sub-header decorate\">\n          {strainRace}\n        </Typography>\n      </div>\n\n      <Typography variant=\"h6\" className=\"secondary\">\n        description\n      </Typography>\n      <Typography variant=\"body1\" className=\"primary body\">\n        {description}\n      </Typography>\n      <Typography variant=\"h4\" className=\"header primary\">\n        Effects\n      </Typography>\n\n      <Card className={classes.cards}>\n        <CardContent>\n          <Typography variant=\"h6\" className=\"secondary\">\n            Used for\n          </Typography>\n          <Divider />\n          {medical.length > 1 ? (\n            <div className={classes.chipWrapper}>\n              {medical.map((item) => (\n                <Chip key={item} label={item} variant=\"outlined\" />\n              ))}\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n\n      <Card className={classes.cards}>\n        <CardContent>\n          <Typography variant=\"h6\" className=\"secondary\">\n            positive\n          </Typography>\n          <Divider />\n          {positive.length > 1 ? (\n            <div className={classes.chipWrapper}>\n              {positive.map((item) => (\n                <Chip key={item} label={item} variant=\"outlined\" />\n              ))}\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n\n      <Card className={classes.cards}>\n        <CardContent>\n          <Typography variant=\"h6\" className=\"secondary\">\n            negative\n          </Typography>\n          <Divider />\n          {negative.length > 1 ? (\n            <div className={classes.chipWrapper}>\n              {negative.map((item) => (\n                <Chip key={item} label={item} variant=\"outlined\" />\n              ))}\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default StrainDetails;\n","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport SimilarStrains from \"./SimilarStrains\";\nimport StrainDetails from \"./StrainDetails\";\nimport imageSources from \"./imageSources\";\nimport { Container, Typography, CircularProgress } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nconst Strain = (props) => {\n  const [loading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => setIsLoading(false), 2000);\n  }, []);\n\n  const {\n    name,\n    description,\n    medical,\n    positive,\n    negative,\n    imageName,\n    setIsPng,\n    setIsJpg,\n    setIsDefault,\n    isPng,\n    isJpg,\n    isDefault,\n    strainRace,\n    isSuccess,\n  } = props;\n\n  const returnToSearch = () => {\n    props.setStrainName(\"\");\n  };\n\n  const imageFailPng = () => {\n    setIsPng(!isPng);\n    setIsJpg(!isJpg);\n  };\n\n  const imageFailJpg = () => {\n    setIsJpg(!isJpg);\n    setIsDefault(!isDefault);\n  };\n\n  return (\n    <Container size=\"md\">\n      {loading ? (\n        <div className=\"loading\">\n          <CircularProgress className=\"loading-icon\" />\n        </div>\n      ) : (\n        <div>\n          {!isSuccess ? (\n            <div className=\"center-row\">\n              <div className=\"loading\">\n                <Typography variant=\"h3\" className=\"header decorate\">\n                  Sorry, we do not have that strain.\n                </Typography>\n                <div className=\"button-margin\">\n                  <Link to=\"/search\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn-fill btn-bottom long\"\n                      onClick={() => returnToSearch()}\n                    >\n                      Back To Search\n                    </button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"strain-component\">\n              {imageName && isPng ? (\n                <div className=\"image-wrapper\">\n                  <img\n                    className=\"strain-image\"\n                    src={`https://images.leafly.com/flower-images/${imageName}.png`}\n                    onError={imageFailPng}\n                    alt=\"Strain\"\n                  />\n                </div>\n              ) : null}\n              {imageName && isJpg ? (\n                <div className=\"image-wrapper\">\n                  <img\n                    className=\"strain-image\"\n                    src={`https://images.leafly.com/flower-images/${imageName}.jpg`}\n                    onError={imageFailJpg}\n                    alt=\"Strain\"\n                  />\n                </div>\n              ) : null}\n              {imageName && isDefault ? (\n                <div className=\"image-wrapper\">\n                  <img\n                    src={imageSources[Math.floor(Math.random() * 4 + 1)]}\n                    alt=\"default\"\n                    className=\"strain-image\"\n                  />\n                </div>\n              ) : null}\n\n              <StrainDetails\n                description={description}\n                medical={medical}\n                positive={positive}\n                negative={negative}\n                name={name}\n                strainRace={strainRace}\n              />\n\n              <SimilarStrains\n                race={strainRace}\n                getStrainByName={props.getStrainByName}\n                similarStrainsList={props.similarStrainsList}\n              />\n\n              <div className=\"back-button-wrapper\">\n                <div className=\"button-margin\">\n                  <Link to=\"/search\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn-fill btn-bottom long\"\n                      onClick={() => returnToSearch()}\n                    >\n                      Back To Search\n                    </button>\n                  </Link>\n                </div>\n                <div className=\"button-margin\">\n                  <Link to=\"/browse\">\n                    <button className=\"btn-fill btn-bottom long green\">\n                      All Strains\n                    </button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\nexport default Strain;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Container, Typography, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  marginAutoContainer: {\n    textAlign: \"left\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n\nconst Landing = () => {\n  const classes = useStyles();\n  return (\n    <div className=\"landing\">\n      <Container maxWidth=\"md\" className={classes.marginAutoContainer}>\n        <div className=\"landing-info\">\n          <Typography variant=\"h3\" className=\"primary header\">\n            A free & simple cannabis information app.\n          </Typography>\n          <Typography variant=\"h6\" className=\"primary body\">\n            We have a large database of cannabis data. Search a cannabis strain\n            and get some{\" \"}\n            <Box component=\"span\" className=\"primary header span\">\n              Dope Data.\n            </Box>\n          </Typography>\n        </div>\n        <div className=\"disclaimer\">\n          <Typography variant=\"body2\" className=\"body-small\">\n            Cannabis is a drug and should be consumed legally and responsibly.\n          </Typography>\n          <Typography variant=\"h6\" className=\"primary header-small span\">\n            Are you over 21?\n          </Typography>\n          <div className=\"button-wrapper\">\n            <div className=\"button-margin\">\n              <Link to=\"search\">\n                <button\n                  type=\"submit\"\n                  className=\"btn-fill btn-bottom\"\n                  // onClick={() => props.setIsAdult(true)}\n                >\n                  Yes I Am\n                </button>\n              </Link>\n            </div>\n            <div className=\"button-margin\">\n              <button type=\"submit\" className=\"btn-fill btn-bottom\">\n                No I Am Not\n              </button>\n            </div>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default Landing;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  FormHelperText,\n  FormControl,\n  NativeSelect,\n  Container,\n  Typography,\n} from \"@material-ui/core\";\n\nconst columns = [\n  { id: \"name\", label: \"Name\", minWidth: 170 },\n  { id: \"race\", label: \"Strain Race\", minWidth: 100 },\n];\n\nconst useStyles = makeStyles({\n  table: {\n    margin: \"auto\",\n    padding: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignContent: \"center\",\n    textAlign: \"center\",\n  },\n  button: {\n    margin: \"1rem\",\n  },\n  wrapper: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: \"100%\",\n  },\n  pagination: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n});\n\nconst AllStrains = (props) => {\n  const {\n    allStrains,\n    getStrainByName,\n    setIsSuccess,\n    setStrainName,\n    setNoStrainError,\n  } = props;\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n  const [strainTypeLabel, setStrainTypeLabel] = useState(\"All\");\n  const [strainsTable, setStrainsTable] = useState(allStrains);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const handleNameClick = (name) => {\n    getStrainByName(name);\n  };\n\n  const handleChange = (event) => {\n    setStrainTypeLabel(event.target.value);\n    handleTypeChange(event.target.value);\n  };\n\n  const handleTypeChange = (race) => {\n    if (race === \"all\") {\n      setStrainsTable(allStrains);\n      setPage(0);\n    } else {\n      const filtered = allStrains.filter((type) => {\n        return type.race === race;\n      });\n      setStrainsTable(filtered);\n      setPage(0);\n    }\n  };\n\n  const returnToSearch = () => {\n    setIsSuccess(false);\n    setStrainName(\"\");\n    setNoStrainError(false);\n  };\n\n  return (\n    <Container className={classes.table}>\n      {strainsTable.length < 2 ? null : (\n        <Paper className={classes.wrapper}>\n          <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell\n                    key=\"name\"\n                    align={columns.align}\n                    style={{ minWidth: columns.minWidth }}\n                  >\n                    Name\n                  </TableCell>\n\n                  <TableCell\n                    key=\"race\"\n                    align={columns.align}\n                    style={{ minWidth: columns.minWidth }}\n                  >\n                    <FormControl className={classes.formControl}>\n                      <FormHelperText>Strain Type</FormHelperText>\n                      <NativeSelect\n                        className={classes.selectEmpty}\n                        value={strainTypeLabel}\n                        name=\"age\"\n                        onChange={handleChange}\n                        inputProps={{ \"aria-label\": \"age\" }}\n                      >\n                        <option value={\"all\"}>All</option>\n                        <option value={\"indica\"}>Indica</option>\n                        <option value={\"sativa\"}>Sativa</option>\n                        <option value={\"hybrid\"}>hybrid</option>\n                      </NativeSelect>\n                    </FormControl>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {strainsTable\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row) => {\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.id}\n                      >\n                        <TableCell key={columns.id} align={columns.align}>\n                          <Link to=\"/strain\">\n                            <button\n                              className=\"link\"\n                              onClick={() => handleNameClick(row.name)}\n                            >\n                              {row.name}\n                            </button>\n                          </Link>\n                        </TableCell>\n\n                        <TableCell key={columns.id} align={columns.align}>\n                          <Typography\n                            variant=\"body2\"\n                            className=\"header-mini primary\"\n                          >\n                            {row.race}\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Paper className={classes.pagination}>\n            <TablePagination\n              rowsPerPageOptions={[25, 100, 500]}\n              component=\"div\"\n              count={strainsTable.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </Paper>\n        </Paper>\n      )}\n\n      <div className={classes.button}>\n        <Link className=\"center-row\" to=\"/search\">\n          <button\n            className=\"btn-fill btn-bottom full\"\n            onClick={() => returnToSearch()}\n          >\n            Back To Search\n          </button>\n        </Link>\n      </div>\n    </Container>\n  );\n};\n\nexport default AllStrains;\n","// const FIREBASE_API = {\n//     apiKey: \"AIzaSyCU2qKRDnLq9uY0eSLU27UC60dcB_M3Sz8\",\n//     authDomain: \"cannabis-app-43a1d.firebaseapp.com\",\n//     databaseURL: \"https://cannabis-app-43a1d.firebaseio.com\",\n//   }\n   \nconst FIREBASE_API = {\n  apiKey: \"AIzaSyDd766tEItbw3PgqdM1lUvrElpwYY2CmzU\",\n  authDomain: \"cannabis-data-575a4.firebaseapp.com\",\n  databaseURL: \"https://cannabis-data-575a4.firebaseio.com\",\n  }\n   \n  export default FIREBASE_API;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Firebase from \"firebase\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  SearchBar,\n  Nav,\n  Strain,\n  Landing,\n  AllStrains,\n} from \"./components/index\";\nimport { FIREBASE_API, STRAIN_API } from \"./config/index\";\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Lato\", \"sans-serif\"].join(\",\"),\n  },\n});\n\nconst App = () => {\n  // STATE HOOKS\n  const [strainRace, setStrainRace] = useState(\"\");\n  const [strainDesc, setStrainDesc] = useState(\"\");\n  const [medical, setMedical] = useState(\"\");\n  const [positive, setPositive] = useState(\"\");\n  const [negative, setNegative] = useState(\"\");\n  const [strainImageName, setStrainImageName] = useState(false);\n  const [strainName, setStrainName] = useState(\"\");\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [imageCount, setImageCount] = useState(1);\n  const [similarStrainsList, setSimilarStrainsList] = useState(\"\");\n  const [isPng, setIsPng] = useState(true);\n  const [isJpg, setIsJpg] = useState(false);\n  const [isDefault, setIsDefault] = useState(false);\n  const [allStrains, setAllStrains] = useState([]);\n  const [noStrainError, setNoStrainError] = useState(false);\n\n  if (Firebase.apps.length === 0) {\n    Firebase.initializeApp(FIREBASE_API);\n  }\n\n  useEffect(() => {\n    getAllStrainsData();\n  }, []);\n\n  const getAllStrainsData = () => {\n    const ref = Firebase.database().ref(\"/\");\n    ref.on(\"value\", (snapshot) => {\n      const getData = snapshot.val();\n      setAllStrains(\n        getData.sort(function (a, b) {\n          if (a.name < b.name) {\n            return -1;\n          }\n          if (a.name > b.name) {\n            return 1;\n          }\n          return 0;\n        })\n      );\n    });\n  };\n\n  const getStrainByName = async (strain) => {\n    try {\n      await axios\n        .get(\n          `https://strainapi.evanbusse.com/${STRAIN_API}/strains/search/name/${strain}`\n        )\n        .then(function (response) {\n          if (response.data.length < 1) {\n            setNoStrainError(!noStrainError);\n          } else {\n            response.data.forEach((matches) => {\n              if (strain.toLowerCase() === matches.name.toLowerCase()) {\n                setStrainName(matches.name);\n                setStrainRace(matches.race);\n                setStrainDesc(matches.desc);\n                getStrainDetails(matches.id);\n                getSimilarStrains(matches.race);\n              }\n            });\n            setNoStrainError(false);\n            setIsPng(true);\n            setIsJpg(false);\n            setIsDefault(false);\n            getStrainImageName(strain);\n            setIsSuccess(true);\n          }\n        });\n    } catch (error) {}\n  };\n\n  const getStrainDetails = async (strain) => {\n    try {\n      await axios\n        .get(\n          `https://strainapi.evanbusse.com/${STRAIN_API}/strains/data/effects/${strain}`\n        )\n        .then(function (response) {\n          const { medical, positive, negative } = response.data;\n          getEffectsData(medical, positive, negative);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Very Ugly, research better way to map non array data for react components.\n  const getEffectsData = (medical, positive, negative) => {\n    const medicalEffects = [];\n    const positiveEffects = [];\n    const negativeEffects = [];\n    Object.entries(medical).map(([key, value]) => medicalEffects.push(value));\n    setMedical(medicalEffects);\n    Object.entries(positive).map(([key, value]) => positiveEffects.push(value));\n    setPositive(positiveEffects);\n    Object.entries(negative).map(([key, value]) => negativeEffects.push(value));\n    setNegative(negativeEffects);\n  };\n\n  // set correct name format to retrieve image link.\n  const getStrainImageName = (data) => {\n    let name = data.replace(/\\s/g, \"-\").toLowerCase();\n    setStrainImageName(name);\n  };\n\n  const getSimilarStrains = (race) => {\n    const similarStrain = allStrains.filter((item) => {\n      return item.race === race;\n    });\n    const similarStrainsArray = [];\n    for (var i = 0; i < 6; i++) {\n      similarStrainsArray.push(\n        similarStrain[Math.floor(Math.random() * similarStrain.length - 1 + 1)]\n      );\n    }\n    setSimilarStrainsList(similarStrainsArray);\n  };\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Nav\n          setIsSuccess={setIsSuccess}\n          setStrainName={setStrainName}\n          setNoStrainError={setNoStrainError}\n        />\n\n        <Switch>\n          <Route exact path=\"/cannabis-app/\">\n            <Landing />\n          </Route>\n\n          <Route path=\"/search\">\n            <SearchBar\n              getStrainByName={getStrainByName}\n              allStrains={allStrains}\n              noStrainError={noStrainError}\n            />\n          </Route>\n\n          <Route path=\"/strain\">\n            <Strain\n              name={strainName}\n              strainRace={strainRace}\n              description={strainDesc}\n              medical={medical}\n              positive={positive}\n              negative={negative}\n              imageName={strainImageName}\n              setIsSuccess={setIsSuccess}\n              isSuccess={isSuccess}\n              setStrainName={setStrainName}\n              getStrainByName={getStrainByName}\n              imageCount={imageCount}\n              setImageCount={setImageCount}\n              setIsPng={setIsPng}\n              setIsJpg={setIsJpg}\n              setIsDefault={setIsDefault}\n              isPng={isPng}\n              isJpg={isJpg}\n              isDefault={isDefault}\n              similarStrainsList={similarStrainsList}\n              allStrains={allStrains}\n            />\n          </Route>\n\n          <Route path=\"/browse\">\n            <AllStrains\n              allStrains={allStrains}\n              setAllStrains={setAllStrains}\n              getAllStrainsData={getAllStrainsData}\n              getStrainByName={getStrainByName}\n              setStrainName={setStrainName}\n              setNoStrainError={setNoStrainError}\n              setIsSuccess={setIsSuccess}\n            />\n          </Route>\n        </Switch>\n      </ThemeProvider>\n    </Router>\n  );\n};\nexport default App;\n","const STRAIN_API = \"EwZa0Jz\";\n\nexport default STRAIN_API;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/DopestData.d7636b3e.png\";"],"sourceRoot":""}