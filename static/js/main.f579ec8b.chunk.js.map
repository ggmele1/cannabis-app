{"version":3,"sources":["components/imageSources.js","components/StrainMini.js","components/SearchBar.js","components/Nav.js","components/SimilarStrains.js","components/StrainDetails.js","components/Strain.js","components/Landing.js","config/FIREBASE_API.js","App.js","config/STRAIN_API.js","index.js","components/images/DopestData.png"],"names":["imageSources","StrainMini","props","preSelect","count","map","item","key","className","onClick","getStrainByName","indexOf","toString","handleLink","src","alt","Divider","Typography","variant","useStyles","makeStyles","theme","marginAutoContainer","marginTop","textAlign","display","flexDirection","alignItems","input","fontFamily","fontWeight","marginBottom","background","color","border","borderRadius","textInput","SearchBar","useState","inputValue","setInputValue","data","classes","Container","size","Autocomplete","disableClearable","loadingText","freeSolo","id","options","getOptionLabel","option","name","style","width","renderInput","params","TextField","label","onInputChange","event","newInputValue","Nav","setIsSuccess","setStrainName","logo","SimilarStrains","similarStrainsList","length","Math","floor","random","race","StrainDetails","description","medical","positive","negative","strainRace","cards","maxWidth","chipWrapper","justifyContent","flexWrap","margin","spacing","Card","CardContent","Chip","Strain","imageName","setIsPng","setIsJpg","setIsDefault","isPng","isJpg","isDefault","onError","type","Landing","Box","component","setIsAdult","FIREBASE_API","apiKey","authDomain","databaseURL","createMuiTheme","typography","join","App","setStrainRace","strainDesc","setStrainDesc","setMedical","setPositive","setNegative","strainImageName","setStrainImageName","strainName","filteredSearchData","setFilteredSearchData","isAdult","isSuccess","imageCount","setImageCount","setSimilarStrainsList","Firebase","apps","initializeApp","useEffect","database","ref","on","snapshot","DB_NAMES","val","forEach","strain","push","a","axios","get","then","response","matches","toLowerCase","desc","getStrainDetails","getSimilarStrains","getStrainImageName","console","log","getEffectsData","medicalEffects","positiveEffects","negativeEffects","Object","entries","value","replace","similarStrainsArray","i","ThemeProvider","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f579ec8b.chunk.js","sourcesContent":["const imageSources = [\n    \"https://images.leafly.com/flower-images/purple-punch-fixed.jpg\",\n    \"https://images.leafly.com/flower-images/wedding-cake.jpg\",\n    \"https://images.leafly.com/flower-images/gg-4.jpg\",\n    \"https://images.leafly.com/flower-images/sour-diesel.jpg\",\n    \"https://images.leafly.com/flower-images/blue-dream.png\",\n]\nexport default imageSources;","import React from \"react\";\nimport \"../App.css\";\nimport imageSources from \"./imageSources\";\nimport { Typography, Divider } from \"@material-ui/core\";\n\nconst StrainMini = (props) => {\n  const preSelect = [\"Jack Herer\", \"Gelato\", \"OG Kush\"];\n  let count = 0;\n\n  const handleLink = (item) => {\n    props.getStrainByName(\n      preSelect[preSelect.indexOf(item.toString()).toString()]\n    );\n  };\n\n  return (\n    <div>\n      {preSelect.map((item, key) => (\n        <button key={key} className=\"link\" onClick={() => handleLink(item)}>\n          <div className=\"other-strains-wrapper\">\n            <div className=\"other-strains\">\n              <img\n                src={imageSources[count++]}\n                alt=\"default\"\n                className=\"other-strain-image\"\n              />\n              <Divider className=\"colored-divider\" />\n              <div className=\"other-strain-typography\">\n                <Typography variant=\"subtitle1\" className=\"header-mini primary\">\n                  {item}\n                </Typography>\n                <Typography variant=\"body2\" className=\"header-mini primary\">\n                  Sativa\n                </Typography>\n              </div>\n            </div>\n          </div>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default StrainMini;\n","import React, { useState } from \"react\";\nimport { TextField, Typography, Container } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport StrainMini from \"./StrainMini.js\";\nimport \"../App.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  marginAutoContainer: {\n    marginTop: 25,\n    textAlign: \"left\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  input: {\n    fontFamily: \"Lato\",\n    fontWeight: \"900\",\n    marginTop: 25,\n    marginBottom: 10,\n    background: \"#31ab65\",\n    color: \"#141414\",\n    border: \"2px solid\",\n    borderRadius: 3,\n  },\n  textInput: {\n    fontFamily: \"Lato\",\n    fontWeight: \"900\",\n  }\n}));\n\nconst SearchBar = (props) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const { getStrainByName, data } = props;\n\n  const handleSubmit = () => {\n    getStrainByName(inputValue);\n  };\n\n  const classes = useStyles();\n  return (\n    <div className=\"search\">\n      <Container size=\"md\" className={classes.marginAutoContainer}>\n        <Typography variant=\"h3\" className=\"primary header\">\n          Search a cannabis strain.\n        </Typography>\n        <Autocomplete\n          disableClearable\n          className={classes.input}\n          loadingText=\"Loading\"\n          freeSolo\n          id=\"combo-box-demo\"\n          options={data}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 340 }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Search Strain\"\n              variant=\"filled\"\n              className={classes.textInput}\n            />\n          )}\n          onInputChange={(event, newInputValue) => setInputValue(newInputValue)}\n        />\n        <button className=\"btn-fill btn-bottom\" onClick={() => handleSubmit()}>\n          Search\n        </button>\n        <Typography variant=\"h6\" className=\"secondary\">\n          Popular Searches\n        </Typography>\n        <div className=\"suggestions\">\n          <StrainMini getStrainByName={getStrainByName} />\n        </div>\n      </Container>\n    </div>\n  );\n};\nexport default SearchBar;\n","import React from \"react\";\nimport logo from \"./images/DopestData.png\";\nimport \"../App.css\";\nconst Nav = (props) => {\n  const { setIsSuccess, setStrainName } = props;\n  const returnToSearch = () => {\n    setIsSuccess(false);\n    setStrainName(\"\");\n  };\n\n  return (\n    <button className=\"link\" onClick={() => returnToSearch()}>\n      <div className=\"nav\">\n        <img src={logo} alt=\"logo\" className=\"logo\" />\n      </div>\n    </button>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport \"../App.css\";\nimport imageSources from \"./imageSources\";\nimport { Typography, Divider } from \"@material-ui/core\";\n\nconst SimilarStrains = (props) => {\n  const { similarStrainsList, getStrainByName } = props;\n\n  const handleLink = (item) => {\n    getStrainByName(item);\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h4\" className=\"header primary\">\n        Similar Strains\n      </Typography>\n      {similarStrainsList.length !== 6 ? (\n        <div>Loading</div>\n      ) : (\n        <div>\n          {similarStrainsList.map((item, key) => (\n            <button\n              key={key}\n              className=\"link\"\n              onClick={() => handleLink(item.name)}\n            >\n              <div className=\"other-strains-wrapper\">\n                <div className=\"other-strains\">\n                  <img\n                    src={imageSources[Math.floor(Math.random() * 4 + 1)]}\n                    alt=\"default\"\n                    className=\"other-strain-image\"\n                  />\n                  <Divider className=\"colored-divider\" />\n                  <div className=\"other-strain-typography\">\n                    <Typography\n                      variant=\"subtitle1\"\n                      className=\"header-mini primary\"\n                    >\n                      {item.name}\n                    </Typography>\n                    <Typography variant=\"body2\" className=\"header-mini primary\">\n                      {item.race}\n                    </Typography>\n                  </div>\n                </div>\n              </div>\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimilarStrains;\n","import React from \"react\";\nimport \"../App.css\";\nimport {\n  Typography,\n  Chip,\n  Card,\n  CardContent,\n  Divider,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst StrainDetails = (props) => {\n  const { description, medical, positive, negative, name, strainRace } = props;\n\n  const useStyles = makeStyles((theme) => ({\n    cards: {\n      marginTop: 25,\n      background: \"#ebebeb\",\n      borderRadius: 10,\n      maxWidth: 600,\n    },\n    chipWrapper: {\n      display: \"flex\",\n      marginTop: 8,\n      justifyContent: \"center\",\n      flexWrap: \"wrap\",\n      \"& > *\": {\n        margin: theme.spacing(0.5),\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n    <div>\n      <div className=\"strain-header-wrapper\">\n        <Typography variant=\"h3\" className=\"header decorate\">\n          {name}\n        </Typography>\n        <Typography variant=\"h5\" className=\"sub-header decorate\">\n          {strainRace}\n        </Typography>\n      </div>\n\n      <Typography variant=\"h6\" className=\"secondary\">\n        description\n      </Typography>\n      <Typography variant=\"body1\" className=\"primary body\">\n        {description}\n      </Typography>\n      <Typography variant=\"h4\" className=\"header primary\">\n        Effects\n      </Typography>\n\n      <Card className={classes.cards}>\n        <CardContent>\n          <Typography variant=\"h6\" className=\"secondary\">\n            Used for\n          </Typography>\n          <Divider />\n          {medical.length > 1 ? (\n            <div className={classes.chipWrapper}>\n              {medical.map((item) => (\n                <Chip key={item} label={item} variant=\"outlined\" />\n              ))}\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n\n      <Card className={classes.cards}>\n        <CardContent>\n          <Typography variant=\"h6\" className=\"secondary\">\n            positive\n          </Typography>\n          <Divider />\n          {positive.length > 1 ? (\n            <div className={classes.chipWrapper}>\n              {positive.map((item) => (\n                <Chip key={item} label={item} variant=\"outlined\" />\n              ))}\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n\n      <Card className={classes.cards}>\n        <CardContent>\n          <Typography variant=\"h6\" className=\"secondary\">\n            negative\n          </Typography>\n          <Divider />\n          {negative.length > 1 ? (\n            <div className={classes.chipWrapper}>\n              {negative.map((item) => (\n                <Chip key={item} label={item} variant=\"outlined\" />\n              ))}\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default StrainDetails;\n","import React from \"react\";\nimport \"../App.css\";\nimport SimilarStrains from \"./SimilarStrains\";\nimport StrainDetails from \"./StrainDetails\";\nimport imageSources from \"./imageSources\";\nimport { Container } from \"@material-ui/core\";\n\nconst Strain = (props) => {\n  const {\n    name,\n    description,\n    medical,\n    positive,\n    negative,\n    imageName,\n    setIsPng,\n    setIsJpg,\n    setIsDefault,\n    isPng,\n    isJpg,\n    isDefault,\n    strainRace,\n  } = props;\n\n  const returnToSearch = () => {\n    props.setIsSuccess(false);\n    props.setStrainName(\"\");\n  };\n\n  const imageFailPng = () => {\n    setIsPng(!isPng);\n    setIsJpg(!isJpg);\n  };\n\n  const imageFailJpg = () => {\n    setIsJpg(!isJpg);\n    setIsDefault(!isDefault);\n  };\n\n  return (\n    <Container size=\"md\">\n      <div className=\"strain-component\">\n        {imageName && isPng ? (\n          <div className=\"image-wrapper\">\n            <img\n              className=\"strain-image\"\n              src={`https://images.leafly.com/flower-images/${imageName}.png`}\n              onError={imageFailPng}\n              alt=\"Strain\"\n            />\n          </div>\n        ) : null}\n        {imageName && isJpg ? (\n          <div className=\"image-wrapper\">\n            <img\n              className=\"strain-image\"\n              src={`https://images.leafly.com/flower-images/${imageName}.jpg`}\n              onError={imageFailJpg}\n              alt=\"Strain\"\n            />\n          </div>\n        ) : null}\n        {imageName && isDefault ? (\n          <div className=\"image-wrapper\">\n            <img\n              src={imageSources[Math.floor(Math.random() * 4 + 1)]}\n              alt=\"default\"\n              className=\"strain-image\"\n            />\n          </div>\n        ) : null}\n\n        <StrainDetails\n          description={description}\n          medical={medical}\n          positive={positive}\n          negative={negative}\n          name={name}\n          strainRace={strainRace}\n        />\n\n        <SimilarStrains\n          race={strainRace}\n          getStrainByName={props.getStrainByName}\n          similarStrainsList={props.similarStrainsList}\n        />\n\n        <div className=\"back-button-wrapper\">\n          <button\n            type=\"submit\"\n            className=\"btn-fill btn-bottom long\"\n            onClick={() => returnToSearch()}\n          >\n            Back To Search\n          </button>\n        </div>\n      </div>\n    </Container>\n  );\n};\nexport default Strain;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Container, Typography, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  marginAutoContainer: {\n    textAlign: \"left\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n\nconst Landing = (props) => {\n  const classes = useStyles();\n  return (\n    <div className=\"landing\">\n      <Container maxWidth=\"md\" className={classes.marginAutoContainer}>\n        <div className=\"landing-info\">\n          <Typography variant=\"h3\" className=\"primary header\">\n            A free & simple cannabis information app.\n          </Typography>\n          <Typography variant=\"h6\" className=\"primary body\">\n            We have a large database of cannabis data. Search a cannabis strain\n            and get some{\" \"}\n            <Box component=\"span\" className=\"primary header span\">\n              Dope Data.\n            </Box>\n          </Typography>\n        </div>\n        <div className=\"disclaimer\">\n          <Typography variant=\"h6\" className=\"primary header span\">\n            Are you over 21?\n          </Typography>\n          <Typography variant=\"body2\">\n            Cannabis is a drug and should be consumed legally and responsibly.\n          </Typography>\n          <div className=\"button-wrapper\">\n            <button\n              type=\"submit\"\n              className=\"btn-fill btn-bottom\"\n              onClick={() => props.setIsAdult(true)}\n            >\n              Yes I am\n            </button>\n            <button type=\"submit\" className=\"btn-fill btn-bottom\">\n              No I am Not\n            </button>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default Landing;\n","const FIREBASE_API = {\n    apiKey: \"AIzaSyCU2qKRDnLq9uY0eSLU27UC60dcB_M3Sz8\",\n    authDomain: \"cannabis-app-43a1d.firebaseapp.com\",\n    databaseURL: \"https://cannabis-app-43a1d.firebaseio.com\",\n  }\n   \n  export default FIREBASE_API;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Firebase from \"firebase\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { SearchBar, Nav, Strain, Landing } from \"./components/index\";\nimport { FIREBASE_API, STRAIN_API } from \"./config/index\";\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Lato\", \"sans-serif\"].join(\",\"),\n  },\n});\n\nconst App = () => {\n  // STATE HOOKS\n  const [strainRace, setStrainRace] = useState(\"\");\n  const [strainDesc, setStrainDesc] = useState(\"\");\n  const [medical, setMedical] = useState(\"\");\n  const [positive, setPositive] = useState(\"\");\n  const [negative, setNegative] = useState(\"\");\n  const [strainImageName, setStrainImageName] = useState(false);\n  const [strainName, setStrainName] = useState(\"\");\n  const [filteredSearchData, setFilteredSearchData] = useState();\n  const [isAdult, setIsAdult] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [imageCount, setImageCount] = useState(1);\n  const [similarStrainsList, setSimilarStrainsList] = useState(\"\");\n  const [isPng, setIsPng] = useState(true);\n  const [isJpg, setIsJpg] = useState(false);\n  const [isDefault, setIsDefault] = useState(false);\n\n  if (Firebase.apps.length === 0) {\n    Firebase.initializeApp(FIREBASE_API);\n  }\n\n  // fetches name data for auto-complete form\n  useEffect(() => {\n    const ref = Firebase.database().ref(\"/\");\n    ref.on(\"value\", (snapshot) => {\n      const DB_NAMES = [];\n      const getNameData = snapshot.val();\n      getNameData.forEach((strain) => {\n        DB_NAMES.push({ name: strain });\n      });\n      setFilteredSearchData(DB_NAMES);\n    });\n  }, []);\n\n  const getStrainByName = async (strain) => {\n    try {\n      await axios\n        .get(\n          `https://strainapi.evanbusse.com/${STRAIN_API}/strains/search/name/${strain}`\n        )\n        .then(function (response) {\n          response.data.forEach((matches) => {\n            if (strain.toLowerCase() === matches.name.toLowerCase()) {\n              setStrainName(matches.name);\n              setStrainRace(matches.race);\n              setStrainDesc(matches.desc);\n              getStrainDetails(matches.id);\n              getSimilarStrains(matches.race);\n            }\n          });\n          setIsPng(true);\n          setIsJpg(false);\n          setIsDefault(false);\n          getStrainImageName(strain);\n          setIsSuccess(true);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getStrainDetails = async (strain) => {\n    try {\n      await axios\n        .get(\n          `https://strainapi.evanbusse.com/${STRAIN_API}/strains/data/effects/${strain}`\n        )\n        .then(function (response) {\n          const { medical, positive, negative } = response.data;\n          getEffectsData(medical, positive, negative);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Very Ugly, research better way to map non array data for react components.\n  const getEffectsData = (medical, positive, negative) => {\n    const medicalEffects = [];\n    const positiveEffects = [];\n    const negativeEffects = [];\n    Object.entries(medical).map(([key, value]) => medicalEffects.push(value));\n    setMedical(medicalEffects);\n    Object.entries(positive).map(([key, value]) => positiveEffects.push(value));\n    setPositive(positiveEffects);\n    Object.entries(negative).map(([key, value]) => negativeEffects.push(value));\n    setNegative(negativeEffects);\n  };\n\n  // set correct name format to retrieve image link.\n  const getStrainImageName = (data) => {\n    let name = data.replace(/\\s/g, \"-\").toLowerCase();\n    setStrainImageName(name);\n  };\n\n  const getSimilarStrains = async (race) => {\n    try {\n      await axios\n        .get(\n          `https://strainapi.evanbusse.com/${STRAIN_API}/strains/search/race/${race}`\n        )\n        .then(function (response) {\n          const similarStrainsArray = [];\n          for (var i = 0; i < 6; i++) {\n            similarStrainsArray.push(\n              response.data[\n                Math.floor(Math.random() * response.data.length - 1 + 1)\n              ]\n            );\n          }\n          setSimilarStrainsList(similarStrainsArray);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // const getAllStrains = () => {\n  //     try {\n  //         axios.get('https://strainapi.evanbusse.com/EwZa0Jz/strains/search/all')\n  //         .then(function (response) {\n  //             let info = response.data;\n  //             let names = Object.keys(info)\n  //             // Firebase.database().ref(\"/\").set([{name: names}])\n  //         })\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Nav setIsSuccess={setIsSuccess} setStrainName={setStrainName} />\n      <div>\n        {!isAdult ? <Landing setIsAdult={setIsAdult} /> : null}\n\n        {isAdult && !isSuccess ? (\n          <SearchBar\n            data={filteredSearchData}\n            getStrainByName={getStrainByName}\n          />\n        ) : null}\n\n        {!strainName ? null : (\n          <Strain\n            name={strainName}\n            strainRace={strainRace}\n            description={strainDesc}\n            medical={medical}\n            positive={positive}\n            negative={negative}\n            imageName={strainImageName}\n            setIsSuccess={setIsSuccess}\n            setStrainName={setStrainName}\n            getStrainByName={getStrainByName}\n            imageCount={imageCount}\n            setImageCount={setImageCount}\n            setIsPng={setIsPng}\n            setIsJpg={setIsJpg}\n            setIsDefault={setIsDefault}\n            isPng={isPng}\n            isJpg={isJpg}\n            isDefault={isDefault}\n            filteredSearchData={filteredSearchData}\n            similarStrainsList={similarStrainsList}\n          />\n        )}\n      </div>\n    </ThemeProvider>\n  );\n};\nexport default App;\n","const STRAIN_API = \"EwZa0Jz\";\n\nexport default STRAIN_API;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/DopestData.d7636b3e.png\";"],"sourceRoot":""}